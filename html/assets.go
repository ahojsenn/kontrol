// Code generated by go-bindata.
// sources:
// html/assets.go
// html/index.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlAssetsGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func htmlAssetsGoBytes() ([]byte, error) {
	return bindataRead(
		_htmlAssetsGo,
		"html/assets.go",
	)
}

func htmlAssetsGo() (*asset, error) {
	bytes, err := htmlAssetsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/assets.go", size: 0, mode: os.FileMode(436), modTime: time.Unix(1511721831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\x5d\x6b\xdb\x40\x10\x7c\xf7\xaf\x58\x2e\xaf\x8d\x3e\xd2\xa4\x21\x87\x30\x38\x4d\x48\x4d\x5a\xb5\xd8\xa6\xa1\x94\x52\x2e\xd2\xda\x3a\x2c\xdd\xa9\x77\xab\xb6\x46\xe8\xbf\x97\x93\x9d\x0f\x2b\xb2\x09\x86\xee\x83\xc1\xbb\xb3\xa3\xdb\xdd\x99\x28\x0b\x87\xb7\xba\x28\x0a\x49\x05\x2a\x82\x5b\xad\xc8\xe8\x1c\xa6\x68\x7e\xcb\x04\x23\x3f\x0b\x87\x83\xa8\x34\x38\x1c\x00\x00\x44\x96\x8c\x56\x8b\xe1\x04\x7f\x55\x68\x89\x47\xfe\x26\xd1\x56\x6f\xae\x67\x90\x11\x95\xdc\xf7\xeb\xda\xfb\xa0\x2d\x29\x51\x60\xd3\xf0\xba\xf6\xbe\x68\x43\x4d\xe3\x2f\xd7\xfc\xbe\x48\x12\x5d\x29\xb2\x83\x2d\xda\x2b\xb4\x89\x91\x25\x49\xad\x3a\xd4\x1f\xa5\x25\xd0\x73\x78\xe8\xf3\x06\x9d\xf7\xd8\x52\x2b\x8b\xf0\x5e\xa7\x68\x3b\xbd\x27\x41\xc0\x61\x5a\x25\x09\x5a\xbb\xa3\xed\x52\xa7\xab\x4e\x57\xdd\xfe\xba\x60\xa3\xcd\x47\x19\x87\xef\x8f\xd9\x6d\xcc\x43\x7c\xfe\xa3\xd0\xf0\x9e\x82\x8b\x71\xca\x81\x8d\x62\xf6\xa6\xb7\x1a\x8b\x02\x5d\x5d\x2d\x11\x62\xcc\x0c\xaa\x7b\x34\x8b\x1d\xe0\xd9\xaa\x74\xe0\x52\x18\x52\x68\xd8\x0b\x4c\xb3\x95\x69\xb6\x49\x3c\xcf\x7b\xfc\xff\x63\xb0\x86\x47\x7e\x7b\xe4\xff\x79\x6b\xbf\x1e\x5f\x35\xaf\x3d\xf8\x66\xe7\x90\x22\x09\x99\x5b\x90\x2a\xc9\xab\x54\xaa\x05\xdc\x6b\xbd\x94\x6a\x71\xa8\x00\x5c\xe2\x34\x38\xe5\x10\x6b\x82\xb9\xae\x54\x7a\x90\x26\x2e\xd7\xaf\x78\x8d\x26\xd8\xa8\x70\xa3\x30\x0e\xe7\x67\x67\x17\xde\xc5\xb3\x78\x79\x5c\xf6\x49\x2b\xca\x18\x87\xb0\xa7\x36\xc3\xbf\x8e\x86\x4d\xe2\x9f\x27\x41\x78\x1e\x84\x6f\xc3\xe3\x52\x26\x15\x1e\xc5\x48\xd3\x4c\x18\x3c\x9a\xdc\xf5\x28\x86\xcd\x56\xa5\xeb\x8b\x91\x48\x0b\x45\x28\xf3\x3e\xd4\x37\x14\x86\x71\x70\xd4\xfb\xe4\xb3\x6f\xc2\xe3\x77\x41\x10\x1c\x38\xd5\xcd\x57\xb8\x56\xa4\x44\x56\xe0\x9e\x19\xf6\x41\x76\x0e\xf0\x24\xf7\xa7\x2e\xd6\x7a\x95\x75\xcd\xca\xc6\x69\xbb\xe2\xee\x1e\x99\xf3\x67\x5b\x11\xf9\x1c\xee\xa4\x49\xb1\x10\x4a\x75\x51\xce\x98\xac\xcf\x99\xcf\x96\xc8\xa6\x22\x4f\x35\xe3\x10\x6c\x99\xef\x5f\x00\x00\x00\xff\xff\x4e\x30\x55\x38\x8c\x05\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 1420, mode: os.FileMode(436), modTime: time.Unix(1511344139, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/assets.go": htmlAssetsGo,
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"assets.go": &bintree{htmlAssetsGo, map[string]*bintree{}},
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

